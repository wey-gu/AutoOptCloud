#
# For adding background load per each computes
#
heat_template_version: 2016-10-14

description: >
  cloud pipeline load generation VM

parameters:
  scheme:
    description: >
      vm metadata
    type: json

  node_name:
    description: >
      vm name
    type: string

  index:
    description: >
      vm index
    type: number

  etc_hosts_string:
    description: >
      etc hosts string
    type: string

  ssh_user:
    description: >
      OS user name
    type: string

  server_group:
    description: >
      ID of a server group
    type: string

  port:
    description: >
      port id or name
    type: string

  image:
    description: >
      Select a base image
    type: string
    constraints:
    - custom_constraint: glance.image

  nova_availability_zone:
    type: string
    description: >
      Availability zone
    default: nova
    immutable: true

  load_gen_server_group_policies:
    type: comma_delimited_list
    description: >
      List of policies applied on load nodes ServerGroup.
    default: ['anti-affinity']
    immutable: true

  public_key:
    description: >
      The SSH public key to access the VM hosts
    type: string

resources:

# port to be added
  vm:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: nova_availability_zone }
      name: { get_param: node_name }
      flavor: { get_param: [scheme, { get_param: node_name }, flavor] }
      image: {get_param: image}
      networks:
      - port: {get_param: port}
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      user_data_update_policy: IGNORE
      user_data: {get_resource: setup_config_and_load}
      scheduler_hints:
        group: {get_param: server_group}

  user_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
        - name: { get_param: ssh_user }
          gecos: User
          primary_group: { get_param: ssh_user }
          lock_passwd: true
          groups: [wheel, adm, systemd-journal]
          sudo: ["ALL=(ALL) NOPASSWD:ALL"]
          shell: /bin/bash
          ssh_authorized_keys:
          - {get_param: public_key}

  include_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /var/lib/cloud_pipeline_functions.sh
          permissions: 0755
          content: {get_file: ../scripts/functions.sh}
        - path: /tmp/etc_hosts
          permissions: 0644
          content: {get_param: etc_hosts_string}

  init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            $cpu_load_enabled$: { get_param: [scheme, { get_param: node_name }, cpu_load_enabled] }
            $cpu_percentage$:
              if:
                - { get_param: [scheme, { get_param: node_name }, cpu_load_enabled] }
                - { get_param: [scheme, { get_param: node_name }, cpu_percentage] }
                - ""
            $fileio_enabled$: { get_param: [scheme, { get_param: node_name }, fileio_enabled] }
            $fileio_thread$:
              if:
                - { get_param: [scheme, { get_param: node_name }, fileio_enabled] }
                - { get_param: [scheme, { get_param: node_name }, fileio_thread] }
                - ""
            $iperf_server_host$ : { get_param: [scheme, iperf_server_host] }
            $iperf_enabled$: { get_param: [scheme, { get_param: node_name }, iperf_enabled] }
            $iperf_role$:
              if:
                - { get_param: [scheme, { get_param: node_name }, iperf_enabled] }
                - { get_param: [scheme, { get_param: node_name }, iperf_role] }
                - ""
            $iperf_parallel$:
              if:
                - { get_param: [scheme, { get_param: node_name }, iperf_enabled] }
                - { get_param: [scheme, iperf_parallel] }
                - ""
          template: {get_file: ../scripts/fire_load.sh}

  setup_config_and_load:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: user_config}
      - config: {get_resource: include_files}
      - config: {get_resource: init_config}
