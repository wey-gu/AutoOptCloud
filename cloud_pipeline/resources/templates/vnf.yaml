#
# For adding background load per each computes
#
heat_template_version: 2016-10-14

description: >
  VNF for benchmark query function

parameters:

  scheme:
    description: >
      vm metadata
    type: json

  benchmark_retry:
    description: >
      benchmark_retry
    default: 3
    type: number

  host_count:
    description: >
      vm metadata
    type: number

  ssh_user:
    description: >
      user name
    type: string
    default: ubuntu
    immutable: true

  external_network:
    type: string
    description: >
      The external network
    constraints:
    - custom_constraint: neutron.network
    immutable: true

  external_subnet:
    type: string
    description: >
      External subnet 
    constraints:
    - custom_constraint: neutron.subnet
    immutable: true

  # vnf_address_pre_fix:
  #   description: >
  #     vnf fixed ip prefix
  #   type: string

  hostname_pre_fix:
    description: >
      hostname prefix
    type: string

  image:
    description: >
      Select a base image
    type: string
    constraints:
    - custom_constraint: glance.image

  nova_availability_zone:
    type: string
    description: >
      Availability zone
    default: nova
    immutable: true

  iperf_server_group_policies:
    type: comma_delimited_list
    description: >
      List of policies applied on load nodes ServerGroup.
    default: ['anti-affinity']
    immutable: true

  public_key:
    description: >
      The SSH public key to access the VM hosts
    type: string


resources:

  server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: vnf-server-group
      policies: { get_param: iperf_server_group_policies }

  # also included /etc/hosts line per port in output
  ports:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: host_count }
      resource_def:
        type: hotFiles/port.yaml
        properties:
          index: "%index%"
          name: 
            str_replace:
              params:
                $NODENAME$: { get_param: hostname_pre_fix}
              template: port-$NODENAME$-%index%
          network: { get_param: external_network }
          subnet: { get_param: external_subnet }
          # fixed_ip:
          #   str_replace:
          #     params:
          #       $pre_fix$: { get_param: vnf_address_pre_fix }
          #     template: $pre_fix$%index%

  etc_hosts:
    type: OS::Heat::Value
    depends_on: [ ports ]
    properties:
      type: string
      value: {list_join: ["\n", { get_attr: [ports, etc_host_line]}]}

  ansible_hosts:
    type: OS::Heat::Value
    depends_on: [ ports ]
    properties:
      type: string
      value: {list_join: ["\n", { get_attr: [ports, ansible_host_line]}]}

  vnf_vms:
    type: OS::Heat::ResourceGroup
    depends_on: [ ports, etc_hosts ]
    update_policy:
      batch_create:
        max_batch_size: 1
        pause_time: 240
    properties:
      count: 6
      resource_def:
        type: hotFiles/vnf_vm.yaml
        properties:
          nova_availability_zone: { get_param: nova_availability_zone }
          index: "%index%"
          benchmark_retry: {get_param: benchmark_retry}
          hostname:
            str_replace:
              params:
                $NODENAME$: { get_param: hostname_pre_fix}
              template: $NODENAME$-%index%
          ssh_user: { get_param: ssh_user }
          public_key: { get_param: public_key }
          image: { get_param: image }
          port:
            str_replace:
              params:
                $NODENAME$: { get_param: hostname_pre_fix}
              template: port-$NODENAME$-%index%
          server_group: { get_resource: server_group }
          scheme: { get_param: scheme }
          etc_hosts_string: {get_attr: [etc_hosts, value]}